// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cache_volume_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheVolumeClient is the client API for CacheVolume service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheVolumeClient interface {
	CreateBlob(ctx context.Context, in *CreateBlobRequest, opts ...grpc.CallOption) (*CreateBlobResponse, error)
	DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*DeleteBlobResponse, error)
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error)
	ListBlob(ctx context.Context, in *ListBlobRequest, opts ...grpc.CallOption) (*ListBlobResponse, error)
}

type cacheVolumeClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheVolumeClient(cc grpc.ClientConnInterface) CacheVolumeClient {
	return &cacheVolumeClient{cc}
}

func (c *cacheVolumeClient) CreateBlob(ctx context.Context, in *CreateBlobRequest, opts ...grpc.CallOption) (*CreateBlobResponse, error) {
	out := new(CreateBlobResponse)
	err := c.cc.Invoke(ctx, "/cache_volume_service.CacheVolume/CreateBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheVolumeClient) DeleteBlob(ctx context.Context, in *DeleteBlobRequest, opts ...grpc.CallOption) (*DeleteBlobResponse, error) {
	out := new(DeleteBlobResponse)
	err := c.cc.Invoke(ctx, "/cache_volume_service.CacheVolume/DeleteBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheVolumeClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error) {
	out := new(GetBlobResponse)
	err := c.cc.Invoke(ctx, "/cache_volume_service.CacheVolume/GetBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheVolumeClient) ListBlob(ctx context.Context, in *ListBlobRequest, opts ...grpc.CallOption) (*ListBlobResponse, error) {
	out := new(ListBlobResponse)
	err := c.cc.Invoke(ctx, "/cache_volume_service.CacheVolume/ListBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheVolumeServer is the server API for CacheVolume service.
// All implementations must embed UnimplementedCacheVolumeServer
// for forward compatibility
type CacheVolumeServer interface {
	CreateBlob(context.Context, *CreateBlobRequest) (*CreateBlobResponse, error)
	DeleteBlob(context.Context, *DeleteBlobRequest) (*DeleteBlobResponse, error)
	GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error)
	ListBlob(context.Context, *ListBlobRequest) (*ListBlobResponse, error)
	mustEmbedUnimplementedCacheVolumeServer()
}

// UnimplementedCacheVolumeServer must be embedded to have forward compatible implementations.
type UnimplementedCacheVolumeServer struct {
}

func (UnimplementedCacheVolumeServer) CreateBlob(context.Context, *CreateBlobRequest) (*CreateBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlob not implemented")
}
func (UnimplementedCacheVolumeServer) DeleteBlob(context.Context, *DeleteBlobRequest) (*DeleteBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlob not implemented")
}
func (UnimplementedCacheVolumeServer) GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedCacheVolumeServer) ListBlob(context.Context, *ListBlobRequest) (*ListBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlob not implemented")
}
func (UnimplementedCacheVolumeServer) mustEmbedUnimplementedCacheVolumeServer() {}

// UnsafeCacheVolumeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheVolumeServer will
// result in compilation errors.
type UnsafeCacheVolumeServer interface {
	mustEmbedUnimplementedCacheVolumeServer()
}

func RegisterCacheVolumeServer(s grpc.ServiceRegistrar, srv CacheVolumeServer) {
	s.RegisterService(&CacheVolume_ServiceDesc, srv)
}

func _CacheVolume_CreateBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheVolumeServer).CreateBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_volume_service.CacheVolume/CreateBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheVolumeServer).CreateBlob(ctx, req.(*CreateBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheVolume_DeleteBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheVolumeServer).DeleteBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_volume_service.CacheVolume/DeleteBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheVolumeServer).DeleteBlob(ctx, req.(*DeleteBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheVolume_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheVolumeServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_volume_service.CacheVolume/GetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheVolumeServer).GetBlob(ctx, req.(*GetBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheVolume_ListBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheVolumeServer).ListBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_volume_service.CacheVolume/ListBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheVolumeServer).ListBlob(ctx, req.(*ListBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheVolume_ServiceDesc is the grpc.ServiceDesc for CacheVolume service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheVolume_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache_volume_service.CacheVolume",
	HandlerType: (*CacheVolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlob",
			Handler:    _CacheVolume_CreateBlob_Handler,
		},
		{
			MethodName: "DeleteBlob",
			Handler:    _CacheVolume_DeleteBlob_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _CacheVolume_GetBlob_Handler,
		},
		{
			MethodName: "ListBlob",
			Handler:    _CacheVolume_ListBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_volume_service.proto",
}
