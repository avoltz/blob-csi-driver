// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package csi_mounts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSIMountsClient is the client API for CSIMounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSIMountsClient interface {
	AddMount(ctx context.Context, in *AddMountReq, opts ...grpc.CallOption) (*AddMountRsp, error)
	RemoveMount(ctx context.Context, in *RemoveMountReq, opts ...grpc.CallOption) (*RemoveMountRsp, error)
}

type cSIMountsClient struct {
	cc grpc.ClientConnInterface
}

func NewCSIMountsClient(cc grpc.ClientConnInterface) CSIMountsClient {
	return &cSIMountsClient{cc}
}

func (c *cSIMountsClient) AddMount(ctx context.Context, in *AddMountReq, opts ...grpc.CallOption) (*AddMountRsp, error) {
	out := new(AddMountRsp)
	err := c.cc.Invoke(ctx, "/csi_mounts.CSIMounts/AddMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIMountsClient) RemoveMount(ctx context.Context, in *RemoveMountReq, opts ...grpc.CallOption) (*RemoveMountRsp, error) {
	out := new(RemoveMountRsp)
	err := c.cc.Invoke(ctx, "/csi_mounts.CSIMounts/RemoveMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSIMountsServer is the server API for CSIMounts service.
// All implementations must embed UnimplementedCSIMountsServer
// for forward compatibility
type CSIMountsServer interface {
	AddMount(context.Context, *AddMountReq) (*AddMountRsp, error)
	RemoveMount(context.Context, *RemoveMountReq) (*RemoveMountRsp, error)
	mustEmbedUnimplementedCSIMountsServer()
}

// UnimplementedCSIMountsServer must be embedded to have forward compatible implementations.
type UnimplementedCSIMountsServer struct {
}

func (UnimplementedCSIMountsServer) AddMount(context.Context, *AddMountReq) (*AddMountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMount not implemented")
}
func (UnimplementedCSIMountsServer) RemoveMount(context.Context, *RemoveMountReq) (*RemoveMountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMount not implemented")
}
func (UnimplementedCSIMountsServer) mustEmbedUnimplementedCSIMountsServer() {}

// UnsafeCSIMountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSIMountsServer will
// result in compilation errors.
type UnsafeCSIMountsServer interface {
	mustEmbedUnimplementedCSIMountsServer()
}

func RegisterCSIMountsServer(s grpc.ServiceRegistrar, srv CSIMountsServer) {
	s.RegisterService(&CSIMounts_ServiceDesc, srv)
}

func _CSIMounts_AddMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIMountsServer).AddMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi_mounts.CSIMounts/AddMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIMountsServer).AddMount(ctx, req.(*AddMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIMounts_RemoveMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIMountsServer).RemoveMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi_mounts.CSIMounts/RemoveMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIMountsServer).RemoveMount(ctx, req.(*RemoveMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CSIMounts_ServiceDesc is the grpc.ServiceDesc for CSIMounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSIMounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csi_mounts.CSIMounts",
	HandlerType: (*CSIMountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMount",
			Handler:    _CSIMounts_AddMount_Handler,
		},
		{
			MethodName: "RemoveMount",
			Handler:    _CSIMounts_RemoveMount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csi_mounts.proto",
}
