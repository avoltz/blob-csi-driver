// Code generated by MockGen. DO NOT EDIT.
// Source: cache_volume_service/cache_volume_service_grpc.pb.go

// Package mock_cache_volume_service is a generated GoMock package.
package mock_cache_volume_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	cache_volume_service "sigs.k8s.io/blob-csi-driver/pkg/edgecache/cache_volume_service"
)

// MockCacheVolumeClient is a mock of CacheVolumeClient interface.
type MockCacheVolumeClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheVolumeClientMockRecorder
}

// MockCacheVolumeClientMockRecorder is the mock recorder for MockCacheVolumeClient.
type MockCacheVolumeClientMockRecorder struct {
	mock *MockCacheVolumeClient
}

// NewMockCacheVolumeClient creates a new mock instance.
func NewMockCacheVolumeClient(ctrl *gomock.Controller) *MockCacheVolumeClient {
	mock := &MockCacheVolumeClient{ctrl: ctrl}
	mock.recorder = &MockCacheVolumeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheVolumeClient) EXPECT() *MockCacheVolumeClientMockRecorder {
	return m.recorder
}

// CreateBlob mocks base method.
func (m *MockCacheVolumeClient) CreateBlob(ctx context.Context, in *cache_volume_service.CreateBlobRequest, opts ...grpc.CallOption) (*cache_volume_service.CreateBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBlob", varargs...)
	ret0, _ := ret[0].(*cache_volume_service.CreateBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockCacheVolumeClientMockRecorder) CreateBlob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockCacheVolumeClient)(nil).CreateBlob), varargs...)
}

// DeleteBlob mocks base method.
func (m *MockCacheVolumeClient) DeleteBlob(ctx context.Context, in *cache_volume_service.DeleteBlobRequest, opts ...grpc.CallOption) (*cache_volume_service.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBlob", varargs...)
	ret0, _ := ret[0].(*cache_volume_service.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockCacheVolumeClientMockRecorder) DeleteBlob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockCacheVolumeClient)(nil).DeleteBlob), varargs...)
}

// GetBlob mocks base method.
func (m *MockCacheVolumeClient) GetBlob(ctx context.Context, in *cache_volume_service.GetBlobRequest, opts ...grpc.CallOption) (*cache_volume_service.GetBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlob", varargs...)
	ret0, _ := ret[0].(*cache_volume_service.GetBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockCacheVolumeClientMockRecorder) GetBlob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockCacheVolumeClient)(nil).GetBlob), varargs...)
}

// ListBlob mocks base method.
func (m *MockCacheVolumeClient) ListBlob(ctx context.Context, in *cache_volume_service.ListBlobRequest, opts ...grpc.CallOption) (*cache_volume_service.ListBlobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlob", varargs...)
	ret0, _ := ret[0].(*cache_volume_service.ListBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlob indicates an expected call of ListBlob.
func (mr *MockCacheVolumeClientMockRecorder) ListBlob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlob", reflect.TypeOf((*MockCacheVolumeClient)(nil).ListBlob), varargs...)
}

// MockCacheVolumeServer is a mock of CacheVolumeServer interface.
type MockCacheVolumeServer struct {
	ctrl     *gomock.Controller
	recorder *MockCacheVolumeServerMockRecorder
}

// MockCacheVolumeServerMockRecorder is the mock recorder for MockCacheVolumeServer.
type MockCacheVolumeServerMockRecorder struct {
	mock *MockCacheVolumeServer
}

// NewMockCacheVolumeServer creates a new mock instance.
func NewMockCacheVolumeServer(ctrl *gomock.Controller) *MockCacheVolumeServer {
	mock := &MockCacheVolumeServer{ctrl: ctrl}
	mock.recorder = &MockCacheVolumeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheVolumeServer) EXPECT() *MockCacheVolumeServerMockRecorder {
	return m.recorder
}

// CreateBlob mocks base method.
func (m *MockCacheVolumeServer) CreateBlob(arg0 context.Context, arg1 *cache_volume_service.CreateBlobRequest) (*cache_volume_service.CreateBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", arg0, arg1)
	ret0, _ := ret[0].(*cache_volume_service.CreateBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob.
func (mr *MockCacheVolumeServerMockRecorder) CreateBlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockCacheVolumeServer)(nil).CreateBlob), arg0, arg1)
}

// DeleteBlob mocks base method.
func (m *MockCacheVolumeServer) DeleteBlob(arg0 context.Context, arg1 *cache_volume_service.DeleteBlobRequest) (*cache_volume_service.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", arg0, arg1)
	ret0, _ := ret[0].(*cache_volume_service.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockCacheVolumeServerMockRecorder) DeleteBlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockCacheVolumeServer)(nil).DeleteBlob), arg0, arg1)
}

// GetBlob mocks base method.
func (m *MockCacheVolumeServer) GetBlob(arg0 context.Context, arg1 *cache_volume_service.GetBlobRequest) (*cache_volume_service.GetBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1)
	ret0, _ := ret[0].(*cache_volume_service.GetBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockCacheVolumeServerMockRecorder) GetBlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockCacheVolumeServer)(nil).GetBlob), arg0, arg1)
}

// ListBlob mocks base method.
func (m *MockCacheVolumeServer) ListBlob(arg0 context.Context, arg1 *cache_volume_service.ListBlobRequest) (*cache_volume_service.ListBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlob", arg0, arg1)
	ret0, _ := ret[0].(*cache_volume_service.ListBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlob indicates an expected call of ListBlob.
func (mr *MockCacheVolumeServerMockRecorder) ListBlob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlob", reflect.TypeOf((*MockCacheVolumeServer)(nil).ListBlob), arg0, arg1)
}

// mustEmbedUnimplementedCacheVolumeServer mocks base method.
func (m *MockCacheVolumeServer) mustEmbedUnimplementedCacheVolumeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCacheVolumeServer")
}

// mustEmbedUnimplementedCacheVolumeServer indicates an expected call of mustEmbedUnimplementedCacheVolumeServer.
func (mr *MockCacheVolumeServerMockRecorder) mustEmbedUnimplementedCacheVolumeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCacheVolumeServer", reflect.TypeOf((*MockCacheVolumeServer)(nil).mustEmbedUnimplementedCacheVolumeServer))
}

// MockUnsafeCacheVolumeServer is a mock of UnsafeCacheVolumeServer interface.
type MockUnsafeCacheVolumeServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCacheVolumeServerMockRecorder
}

// MockUnsafeCacheVolumeServerMockRecorder is the mock recorder for MockUnsafeCacheVolumeServer.
type MockUnsafeCacheVolumeServerMockRecorder struct {
	mock *MockUnsafeCacheVolumeServer
}

// NewMockUnsafeCacheVolumeServer creates a new mock instance.
func NewMockUnsafeCacheVolumeServer(ctrl *gomock.Controller) *MockUnsafeCacheVolumeServer {
	mock := &MockUnsafeCacheVolumeServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCacheVolumeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCacheVolumeServer) EXPECT() *MockUnsafeCacheVolumeServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCacheVolumeServer mocks base method.
func (m *MockUnsafeCacheVolumeServer) mustEmbedUnimplementedCacheVolumeServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCacheVolumeServer")
}

// mustEmbedUnimplementedCacheVolumeServer indicates an expected call of mustEmbedUnimplementedCacheVolumeServer.
func (mr *MockUnsafeCacheVolumeServerMockRecorder) mustEmbedUnimplementedCacheVolumeServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCacheVolumeServer", reflect.TypeOf((*MockUnsafeCacheVolumeServer)(nil).mustEmbedUnimplementedCacheVolumeServer))
}
