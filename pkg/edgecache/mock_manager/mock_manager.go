// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManagerInterface is a mock of ManagerInterface interface.
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface.
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance.
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// MountVolume mocks base method.
func (m *MockManagerInterface) MountVolume(account, container, targetPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountVolume", account, container, targetPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountVolume indicates an expected call of MountVolume.
func (mr *MockManagerInterfaceMockRecorder) MountVolume(account, container, targetPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountVolume", reflect.TypeOf((*MockManagerInterface)(nil).MountVolume), account, container, targetPath)
}

// UnmountVolume mocks base method.
func (m *MockManagerInterface) UnmountVolume(volumeID, targetPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountVolume", volumeID, targetPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountVolume indicates an expected call of UnmountVolume.
func (mr *MockManagerInterfaceMockRecorder) UnmountVolume(volumeID, targetPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountVolume", reflect.TypeOf((*MockManagerInterface)(nil).UnmountVolume), volumeID, targetPath)
}
