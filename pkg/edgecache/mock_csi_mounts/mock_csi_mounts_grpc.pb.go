// Code generated by MockGen. DO NOT EDIT.
// Source: csi_mounts/csi_mounts_grpc.pb.go

// Package mock_csi_mounts is a generated GoMock package.
package mock_csi_mounts

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	csi_mounts "sigs.k8s.io/blob-csi-driver/pkg/edgecache/csi_mounts"
)

// MockCSIMountsClient is a mock of CSIMountsClient interface.
type MockCSIMountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCSIMountsClientMockRecorder
}

// MockCSIMountsClientMockRecorder is the mock recorder for MockCSIMountsClient.
type MockCSIMountsClientMockRecorder struct {
	mock *MockCSIMountsClient
}

// NewMockCSIMountsClient creates a new mock instance.
func NewMockCSIMountsClient(ctrl *gomock.Controller) *MockCSIMountsClient {
	mock := &MockCSIMountsClient{ctrl: ctrl}
	mock.recorder = &MockCSIMountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSIMountsClient) EXPECT() *MockCSIMountsClientMockRecorder {
	return m.recorder
}

// AddMount mocks base method.
func (m *MockCSIMountsClient) AddMount(ctx context.Context, in *csi_mounts.AddMountReq, opts ...grpc.CallOption) (*csi_mounts.AddMountRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMount", varargs...)
	ret0, _ := ret[0].(*csi_mounts.AddMountRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMount indicates an expected call of AddMount.
func (mr *MockCSIMountsClientMockRecorder) AddMount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMount", reflect.TypeOf((*MockCSIMountsClient)(nil).AddMount), varargs...)
}

// RemoveMount mocks base method.
func (m *MockCSIMountsClient) RemoveMount(ctx context.Context, in *csi_mounts.RemoveMountReq, opts ...grpc.CallOption) (*csi_mounts.RemoveMountRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveMount", varargs...)
	ret0, _ := ret[0].(*csi_mounts.RemoveMountRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMount indicates an expected call of RemoveMount.
func (mr *MockCSIMountsClientMockRecorder) RemoveMount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMount", reflect.TypeOf((*MockCSIMountsClient)(nil).RemoveMount), varargs...)
}

// MockCSIMountsServer is a mock of CSIMountsServer interface.
type MockCSIMountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockCSIMountsServerMockRecorder
}

// MockCSIMountsServerMockRecorder is the mock recorder for MockCSIMountsServer.
type MockCSIMountsServerMockRecorder struct {
	mock *MockCSIMountsServer
}

// NewMockCSIMountsServer creates a new mock instance.
func NewMockCSIMountsServer(ctrl *gomock.Controller) *MockCSIMountsServer {
	mock := &MockCSIMountsServer{ctrl: ctrl}
	mock.recorder = &MockCSIMountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSIMountsServer) EXPECT() *MockCSIMountsServerMockRecorder {
	return m.recorder
}

// AddMount mocks base method.
func (m *MockCSIMountsServer) AddMount(arg0 context.Context, arg1 *csi_mounts.AddMountReq) (*csi_mounts.AddMountRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMount", arg0, arg1)
	ret0, _ := ret[0].(*csi_mounts.AddMountRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMount indicates an expected call of AddMount.
func (mr *MockCSIMountsServerMockRecorder) AddMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMount", reflect.TypeOf((*MockCSIMountsServer)(nil).AddMount), arg0, arg1)
}

// RemoveMount mocks base method.
func (m *MockCSIMountsServer) RemoveMount(arg0 context.Context, arg1 *csi_mounts.RemoveMountReq) (*csi_mounts.RemoveMountRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMount", arg0, arg1)
	ret0, _ := ret[0].(*csi_mounts.RemoveMountRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMount indicates an expected call of RemoveMount.
func (mr *MockCSIMountsServerMockRecorder) RemoveMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMount", reflect.TypeOf((*MockCSIMountsServer)(nil).RemoveMount), arg0, arg1)
}

// mustEmbedUnimplementedCSIMountsServer mocks base method.
func (m *MockCSIMountsServer) mustEmbedUnimplementedCSIMountsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCSIMountsServer")
}

// mustEmbedUnimplementedCSIMountsServer indicates an expected call of mustEmbedUnimplementedCSIMountsServer.
func (mr *MockCSIMountsServerMockRecorder) mustEmbedUnimplementedCSIMountsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCSIMountsServer", reflect.TypeOf((*MockCSIMountsServer)(nil).mustEmbedUnimplementedCSIMountsServer))
}

// MockUnsafeCSIMountsServer is a mock of UnsafeCSIMountsServer interface.
type MockUnsafeCSIMountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCSIMountsServerMockRecorder
}

// MockUnsafeCSIMountsServerMockRecorder is the mock recorder for MockUnsafeCSIMountsServer.
type MockUnsafeCSIMountsServerMockRecorder struct {
	mock *MockUnsafeCSIMountsServer
}

// NewMockUnsafeCSIMountsServer creates a new mock instance.
func NewMockUnsafeCSIMountsServer(ctrl *gomock.Controller) *MockUnsafeCSIMountsServer {
	mock := &MockUnsafeCSIMountsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCSIMountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCSIMountsServer) EXPECT() *MockUnsafeCSIMountsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCSIMountsServer mocks base method.
func (m *MockUnsafeCSIMountsServer) mustEmbedUnimplementedCSIMountsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCSIMountsServer")
}

// mustEmbedUnimplementedCSIMountsServer indicates an expected call of mustEmbedUnimplementedCSIMountsServer.
func (mr *MockUnsafeCSIMountsServerMockRecorder) mustEmbedUnimplementedCSIMountsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCSIMountsServer", reflect.TypeOf((*MockUnsafeCSIMountsServer)(nil).mustEmbedUnimplementedCSIMountsServer))
}
